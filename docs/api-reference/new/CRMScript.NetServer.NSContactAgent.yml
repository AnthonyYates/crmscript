### YamlMime:ManagedReference
items:
- uid: CRMScript.NetServer.NSContactAgent
  commentId: T:CRMScript.NetServer.NSContactAgent
  id: NSContactAgent
  so.intellisense: Void.NSContactAgent
  langs:
  - crmscript
  children:
  - CRMScript.NetServer.NSContactAgent.AddPerson
  - CRMScript.NetServer.NSContactAgent.ChangeCountry
  - CRMScript.NetServer.NSContactAgent.Copy
  - CRMScript.NetServer.NSContactAgent.CreateDefaultContactEntity
  - CRMScript.NetServer.NSContactAgent.CreateNewEntry
  - CRMScript.NetServer.NSContactAgent.DeleteContactEntity
  - CRMScript.NetServer.NSContactAgent.DeleteExpired
  - CRMScript.NetServer.NSContactAgent.GetAddress
  - CRMScript.NetServer.NSContactAgent.GetAddressByCountry
  - CRMScript.NetServer.NSContactAgent.GetContact
  - CRMScript.NetServer.NSContactAgent.GetContactEntity
  - CRMScript.NetServer.NSContactAgent.GetContactList
  - CRMScript.NetServer.NSContactAgent.GetContactSummary
  - CRMScript.NetServer.NSContactAgent.GetContactWithPersons
  - CRMScript.NetServer.NSContactAgent.GetDuplicateRules
  - CRMScript.NetServer.NSContactAgent.GetDuplicates
  - CRMScript.NetServer.NSContactAgent.GetMyActiveContacts
  - CRMScript.NetServer.NSContactAgent.GetMyBizCard
  - CRMScript.NetServer.NSContactAgent.GetMyContact
  - CRMScript.NetServer.NSContactAgent.GetMyContacts
  - CRMScript.NetServer.NSContactAgent.GetMyRecentContacts
  - CRMScript.NetServer.NSContactAgent.GetNameDepartmentDuplicates
  - CRMScript.NetServer.NSContactAgent.GetPersons
  - CRMScript.NetServer.NSContactAgent.GetQuoteVersionAddresses
  - CRMScript.NetServer.NSContactAgent.IsNumberValid
  - CRMScript.NetServer.NSContactAgent.Merge
  - CRMScript.NetServer.NSContactAgent.#ctor
  - CRMScript.NetServer.NSContactAgent.SaveContactEntity
  - CRMScript.NetServer.NSContactAgent.SaveQuoteVersionAddress
  - CRMScript.NetServer.NSContactAgent.SetDuplicateRulesStatus
  - CRMScript.NetServer.NSContactAgent.Undelete
  - CRMScript.NetServer.NSContactAgent.ValidateContactEntity
  name: NSContactAgent
  nameWithType: NSContactAgent
  fullName: CRMScript.NetServer.NSContactAgent
  type: Class
  summary: "\nContact (company) data services.\n"
  example: 
  - "\n<pre><code>NSContactAgent agent;\nagent.callMethod(arg1, arg2);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.AddPerson
  commentId: M:CRMScript.NetServer.NSContactAgent.AddPerson
  id: 'AddPerson'
  so.intellisense: NSContactAgent.AddPerson
  langs:
  - crmscript
  name: 'AddPerson'
  nameWithType: NSContactAgent.AddPerson
  fullName: CRMScript.NetServer.NSContactAgent.AddPerson
  type: Method
  summary: "\nAdd a person to the given contact\n"
  remarks: 
  syntax: 
    content: NSPersonEntity AddPerson(Integer contactId, NSPersonEntity newPersonEntity)
    parameters:
    - id: contactId
      type: CRMScript.Global.Integer
      description: 
    - id: newPersonEntity
      type: CRMScript.NetServer.NSPersonEntity
      description: 
    return:
      type: CRMScript.NetServer.NSPersonEntity
  example: 
  - "\n<pre><code>NSContactAgent agent;\nInteger contactId;\nNSPersonEntity newPersonEntity;\nNSPersonEntity res = agent.AddPerson(contactId, newPersonEntity);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.ChangeCountry
  commentId: M:CRMScript.NetServer.NSContactAgent.ChangeCountry
  id: 'ChangeCountry'
  so.intellisense: NSContactAgent.ChangeCountry
  langs:
  - crmscript
  name: 'ChangeCountry'
  nameWithType: NSContactAgent.ChangeCountry
  fullName: CRMScript.NetServer.NSContactAgent.ChangeCountry
  type: Method
  summary: "\nChange country regenerates the default values and localized information such as phone number and address format\n"
  remarks: 
  syntax: 
    content: NSContactEntity ChangeCountry(NSContactEntity contactEntity, Integer toCountryId)
    parameters:
    - id: contactEntity
      type: CRMScript.NetServer.NSContactEntity
      description: 
    - id: toCountryId
      type: CRMScript.Global.Integer
      description: 
    return:
      type: CRMScript.NetServer.NSContactEntity
  example: 
- uid: CRMScript.NetServer.NSContactAgent.Copy
  commentId: M:CRMScript.NetServer.NSContactAgent.Copy
  id: 'Copy'
  so.intellisense: NSContactAgent.Copy
  langs:
  - crmscript
  name: 'Copy'
  nameWithType: NSContactAgent.Copy
  fullName: CRMScript.NetServer.NSContactAgent.Copy
  type: Method
  summary: "\nCopy a contact. Activities and related data will be ignored\n"
  remarks: 
  syntax: 
    content: Integer Copy(Integer sourceContactId, String destinationContactName, String destinationContactDepartment, Bool copyPersons)
    parameters:
    - id: sourceContactId
      type: CRMScript.Global.Integer
      description: 
    - id: destinationContactName
      type: CRMScript.Global.String
      description: 
    - id: destinationContactDepartment
      type: CRMScript.Global.String
      description: 
    - id: copyPersons
      type: CRMScript.Global.Bool
      description: 
    return:
      type: CRMScript.Global.Integer
  example: 
  - "\n<pre><code>NSContactAgent agent;\nInteger sourceContactId;\nString destinationContactName;\nString destinationContactDepartment;\nBool copyPersons;\nInteger res = agent.Copy(sourceContactId, destinationContactName, destinationContactDepartment, copyPersons);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.CreateDefaultContactEntity
  commentId: M:CRMScript.NetServer.NSContactAgent.CreateDefaultContactEntity
  id: 'CreateDefaultContactEntity'
  so.intellisense: NSContactAgent.CreateDefaultContactEntity
  langs:
  - crmscript
  name: 'CreateDefaultContactEntity'
  nameWithType: NSContactAgent.CreateDefaultContactEntity
  fullName: CRMScript.NetServer.NSContactAgent.CreateDefaultContactEntity
  type: Method
  summary: "\nSet default values into a new NSContactEntity.
NetServer calculates default values (e.g. Country) on the entity, which is required when creating/storing a new instance<p></p>\n<strong>Returns:</strong>NSContactEntity<p></p>\n<pre><code>NSContactAgent agent;\nNSContactEntity thing = agent.CreateDefaultContactEntity();\nthing = agent.SaveContactEntity(thing);</code></pre>\n"
  remarks: 
  syntax: 
    content: NSContactEntity CreateDefaultContactEntity()
    parameters:
    return:
      type: CRMScript.NetServer.NSContactEntity
  example: 
  - "\n<pre><code>NSContactAgent agent;\nNSContactEntity thing = agent.CreateDefaultContactEntity();\nthing = agent.SaveContactEntity(thing);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.CreateNewEntry
  commentId: M:CRMScript.NetServer.NSContactAgent.CreateNewEntry
  id: 'CreateNewEntry'
  so.intellisense: NSContactAgent.CreateNewEntry
  langs:
  - crmscript
  name: 'CreateNewEntry'
  nameWithType: NSContactAgent.CreateNewEntry
  fullName: CRMScript.NetServer.NSContactAgent.CreateNewEntry
  type: Method
  summary: "\nCreates a new contact based on external duplicate\n"
  remarks: 
  syntax: 
    content: Integer CreateNewEntry(NSDuplicateEntry duplicate)
    parameters:
    - id: duplicate
      type: CRMScript.NetServer.NSDuplicateEntry
      description: 
    return:
      type: CRMScript.Global.Integer
  example: 
  - "\n<pre><code>NSContactAgent agent;\nNSDuplicateEntry duplicate;\nInteger res = agent.CreateNewEntry(duplicate);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.DeleteContactEntity
  commentId: M:CRMScript.NetServer.NSContactAgent.DeleteContactEntity
  id: 'DeleteContactEntity'
  so.intellisense: NSContactAgent.DeleteContactEntity
  langs:
  - crmscript
  name: 'DeleteContactEntity'
  nameWithType: NSContactAgent.DeleteContactEntity
  fullName: CRMScript.NetServer.NSContactAgent.DeleteContactEntity
  type: Method
  summary: "\nDeletes the NSContactEntity\n"
  remarks: 
  syntax: 
    content: DeleteContactEntity(Integer contactEntity);
    parameters:
    - id: contactEntity;
      type: CRMScript.Global.Integer
      description: 
    - id: contactEntityId
      type: 
      description: 
  example: 
  - "\n<pre><code>NSContactAgent agent;\nagent.DeleteContactEntity(123);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.DeleteExpired
  commentId: M:CRMScript.NetServer.NSContactAgent.DeleteExpired
  id: 'DeleteExpired'
  so.intellisense: NSContactAgent.DeleteExpired
  langs:
  - crmscript
  name: 'DeleteExpired'
  nameWithType: NSContactAgent.DeleteExpired
  fullName: CRMScript.NetServer.NSContactAgent.DeleteExpired
  type: Method
  summary: "\nTrigger deletion of contacts (companies) that has been (soft) deleted and have timed out the expiry period (the SoftDeleteRetention preference).\n"
  remarks: 
  syntax: 
    content: Void DeleteExpired()
    parameters:
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.NetServer.NSContactAgent.GetAddress
  commentId: M:CRMScript.NetServer.NSContactAgent.GetAddress
  id: 'GetAddress'
  so.intellisense: NSContactAgent.GetAddress
  langs:
  - crmscript
  name: 'GetAddress'
  nameWithType: NSContactAgent.GetAddress
  fullName: CRMScript.NetServer.NSContactAgent.GetAddress
  type: Method
  summary: "\nCRMScript method in the NSContactAgent class that gets a contact's localized addressGets the contact's localized address (NSLocalizedField[][]).<p></p>\n<code>NSAddress GetAddress(Integer contactId)</code>\n"
  remarks: 
  syntax: 
    content: GetAddress()
    parameters:
    - id: contactId
      type: CRMScript.Global.Integer
      description: The contact ID
  example: 
  - "\n<pre><code>NSContactAgent agent;\nInteger contactId;\nNSAddress res = agent.GetAddress(contactId);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.GetAddressByCountry
  commentId: M:CRMScript.NetServer.NSContactAgent.GetAddressByCountry
  id: 'GetAddressByCountry'
  so.intellisense: NSContactAgent.GetAddressByCountry
  langs:
  - crmscript
  name: 'GetAddressByCountry'
  nameWithType: NSContactAgent.GetAddressByCountry
  fullName: CRMScript.NetServer.NSContactAgent.GetAddressByCountry
  type: Method
  summary: "\nCRMScript method in the NSContactAgent class that gets a contact's localized addressGets the contact's localized address (NSLocalizedField[][]).<p></p>\n<code>NSAddress GetAddressByCountry(Integer contactId, Integer countryId)</code>\n"
  remarks: 
  syntax: 
    content: GetAddressByCountry()
    parameters:
    - id: contactId
      type: CRMScript.Global.Integer
      description: The contact ID
    - id: countryId
      type: CRMScript.Global.Integer
      description: The country ID
  example: 
  - "\n<pre><code>NSContactAgent agent;\nInteger contactId;\nInteger countryId;\nNSAddress res = agent.GetAddressByCountry(contactId, countryId);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.GetContact
  commentId: M:CRMScript.NetServer.NSContactAgent.GetContact
  id: 'GetContact'
  so.intellisense: NSContactAgent.GetContact
  langs:
  - crmscript
  name: 'GetContact'
  nameWithType: NSContactAgent.GetContact
  fullName: CRMScript.NetServer.NSContactAgent.GetContact
  type: Method
  summary: "\nGets an NSContact object.\n"
  remarks: 
  syntax: 
    content: NSContact GetContact(Integer contactId);
    parameters:
    - id: contactId;
      type: CRMScript.Global.Integer
      description: 
    - id: contactId
      type: 
      description: 
    return:
      type: CRMScript.NetServer.NSContact
  example: 
  - "\n<pre><code>NSContactAgent agent;\nNSContact thing = agent.GetContact(123);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.GetContactEntity
  commentId: M:CRMScript.NetServer.NSContactAgent.GetContactEntity
  id: 'GetContactEntity'
  so.intellisense: NSContactAgent.GetContactEntity
  langs:
  - crmscript
  name: 'GetContactEntity'
  nameWithType: NSContactAgent.GetContactEntity
  fullName: CRMScript.NetServer.NSContactAgent.GetContactEntity
  type: Method
  summary: "\nGets an NSContactEntity object.\n"
  remarks: 
  syntax: 
    content: NSContactEntity GetContactEntity(Integer contactEntityId);
    parameters:
    - id: contactEntityId;
      type: CRMScript.Global.Integer
      description: 
    - id: contactEntityId
      type: 
      description: 
    return:
      type: CRMScript.NetServer.NSContactEntity
  example: 
  - "\n<pre><code>NSContactAgent agent;\nNSContactEntity thing = agent.GetContactEntity(123);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.GetContactList
  commentId: M:CRMScript.NetServer.NSContactAgent.GetContactList
  id: 'GetContactList'
  so.intellisense: NSContactAgent.GetContactList
  langs:
  - crmscript
  name: 'GetContactList'
  nameWithType: NSContactAgent.GetContactList
  fullName: CRMScript.NetServer.NSContactAgent.GetContactList
  type: Method
  summary: "\nGets a vector of Contact objects.\n"
  remarks: 
  syntax: 
    content: NSContact[] GetContactList(Integer[]  contactIds);
    parameters:
    - id: contactIds;
      type: CRMScript.Global.Integer[]
      description: 
    - id: contactIds
      type: 
      description: 
    return:
      type: CRMScript.NetServer.NSContact[]
  example: 
  - "\n<pre><code>Integer[] ids;\nNSContactAgent agent;\nagent.GetContactList(ids);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.GetContactSummary
  commentId: M:CRMScript.NetServer.NSContactAgent.GetContactSummary
  id: 'GetContactSummary'
  so.intellisense: NSContactAgent.GetContactSummary
  langs:
  - crmscript
  name: 'GetContactSummary'
  nameWithType: NSContactAgent.GetContactSummary
  fullName: CRMScript.NetServer.NSContactAgent.GetContactSummary
  type: Method
  summary: "\nGet summary of contact and its recent activity.\n"
  remarks: 
  syntax: 
    content: NSContactSummary GetContactSummary(Integer contactId, Integer limit)
    parameters:
    - id: contactId
      type: CRMScript.Global.Integer
      description: 
    - id: limit
      type: CRMScript.Global.Integer
      description: 
    return:
      type: CRMScript.NetServer.NSContactSummary
  example: 
  - "\n<pre><code>NSContactAgent agent;\nInteger contactId;\nInteger limit;\nNSContactSummary res = agent.GetContactSummary(contactId, limit);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.GetContactWithPersons
  commentId: M:CRMScript.NetServer.NSContactAgent.GetContactWithPersons
  id: 'GetContactWithPersons'
  so.intellisense: NSContactAgent.GetContactWithPersons
  langs:
  - crmscript
  name: 'GetContactWithPersons'
  nameWithType: NSContactAgent.GetContactWithPersons
  fullName: CRMScript.NetServer.NSContactAgent.GetContactWithPersons
  type: Method
  summary: "\nReturns the contact with all the contact persons belonging to the contact\n"
  remarks: 
  syntax: 
    content: NSContactEntity GetContactWithPersons(Integer contactId)
    parameters:
    - id: contactId
      type: CRMScript.Global.Integer
      description: 
    return:
      type: CRMScript.NetServer.NSContactEntity
  example: 
  - "\n<pre><code>NSContactAgent agent;\nInteger contactId;\nNSContactEntity res = agent.GetContactWithPersons(contactId);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.GetDuplicateRules
  commentId: M:CRMScript.NetServer.NSContactAgent.GetDuplicateRules
  id: 'GetDuplicateRules'
  so.intellisense: NSContactAgent.GetDuplicateRules
  langs:
  - crmscript
  name: 'GetDuplicateRules'
  nameWithType: NSContactAgent.GetDuplicateRules
  fullName: CRMScript.NetServer.NSContactAgent.GetDuplicateRules
  type: Method
  summary: "\nRetrieve all available duplicate rules for contact<p></p>\n<strong>Returns:</strong>NSDuplicateRule[]<p></p>\n<pre><code>NSContactAgent agent;\nNSDuplicateRule[] res = agent.GetDuplicateRules();</code></pre>\n"
  remarks: 
  syntax: 
    content: NSDuplicateRule[] GetDuplicateRules()
    parameters:
    return:
      type: CRMScript.NetServer.NSDuplicateRule[]
  example: 
  - "\n<pre><code>NSContactAgent agent;\nNSDuplicateRule[] res = agent.GetDuplicateRules();</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.GetDuplicates
  commentId: M:CRMScript.NetServer.NSContactAgent.GetDuplicates
  id: 'GetDuplicates'
  so.intellisense: NSContactAgent.GetDuplicates
  langs:
  - crmscript
  name: 'GetDuplicates'
  nameWithType: NSContactAgent.GetDuplicates
  fullName: CRMScript.NetServer.NSContactAgent.GetDuplicates
  type: Method
  summary: "\nGet duplicates (exact or similar in the database) based on the name\n"
  remarks: 
  syntax: 
    content: NSDuplicateEntry[] GetDuplicates(String name)
    parameters:
    - id: name
      type: CRMScript.Global.String
      description: 
    return:
      type: CRMScript.NetServer.NSDuplicateEntry[]
  example: 
  - "\n<pre><code>NSContactAgent agent;\nString name;\nNSDuplicateEntry[] res = agent.GetDuplicates(name);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.GetMyActiveContacts
  commentId: M:CRMScript.NetServer.NSContactAgent.GetMyActiveContacts
  id: 'GetMyActiveContacts'
  so.intellisense: NSContactAgent.GetMyActiveContacts
  langs:
  - crmscript
  name: 'GetMyActiveContacts'
  nameWithType: NSContactAgent.GetMyActiveContacts
  fullName: CRMScript.NetServer.NSContactAgent.GetMyActiveContacts
  type: Method
  summary: "\nReturns the contacts where there has been activity since activityStartTime. If activityStartTime is larger than the current date, all contacts with activity since the last log-out are returned. The result set can be filtered by category and action type.\n"
  remarks: "\n<h3>Enum: actionType</h3><ul><li>0 = Unknown</li><li>1 = Created</li><li>2 = Updated</li><li>4 = NewActivity</li><li>8 = ActivityCompleted</li><li>16 = PersonAdded</li><li>32 = PersonUpdated</li><li>64 = DocumentAdded</li><li>127 = All</li></ul>\n"
  syntax: 
    content: NSContactActivity[] GetMyActiveContacts(DateTime activityStartTime, Integer[] contactCategories, Integer actionType)
    parameters:
    - id: activityStartTime
      type: CRMScript.Global.DateTime
      description: 
    - id: contactCategories
      type: CRMScript.Global.Integer[]
      description: 
    - id: actionType
      type: CRMScript.Global.Integer
      description: 
    return:
      type: CRMScript.NetServer.NSContactActivity[]
  example: 
  - "\n<pre><code>NSContactAgent agent;\nDateTime activityStartTime;\nInteger[] contactCategories;\nInteger actionType;\nNSContactActivity[] res = agent.GetMyActiveContacts(activityStartTime, contactCategories, actionType);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.GetMyBizCard
  commentId: M:CRMScript.NetServer.NSContactAgent.GetMyBizCard
  id: 'GetMyBizCard'
  so.intellisense: NSContactAgent.GetMyBizCard
  langs:
  - crmscript
  name: 'GetMyBizCard'
  nameWithType: NSContactAgent.GetMyBizCard
  fullName: CRMScript.NetServer.NSContactAgent.GetMyBizCard
  type: Method
  summary: "\nReturns all data needed to display the logged on person's business card. That is company, person, and company interest data.<p></p>\n<strong>Returns:</strong>NSContactEntity<p></p>\n<pre><code>NSContactAgent agent;\nNSContactEntity res = agent.GetMyBizCard();</code></pre>\n"
  remarks: 
  syntax: 
    content: NSContactEntity GetMyBizCard()
    parameters:
    return:
      type: CRMScript.NetServer.NSContactEntity
  example: 
  - "\n<pre><code>NSContactAgent agent;\nNSContactEntity res = agent.GetMyBizCard();</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.GetMyContact
  commentId: M:CRMScript.NetServer.NSContactAgent.GetMyContact
  id: 'GetMyContact'
  so.intellisense: NSContactAgent.GetMyContact
  langs:
  - crmscript
  name: 'GetMyContact'
  nameWithType: NSContactAgent.GetMyContact
  fullName: CRMScript.NetServer.NSContactAgent.GetMyContact
  type: Method
  summary: "\nGets the contact belonging to the currently logged on user.<p></p>\n<strong>Returns:</strong>NSContactEntity<p></p>\n<pre><code>NSContactAgent agent;\nNSContactEntity res = agent.GetMyContact();</code></pre>\n"
  remarks: 
  syntax: 
    content: NSContactEntity GetMyContact()
    parameters:
    return:
      type: CRMScript.NetServer.NSContactEntity
  example: 
  - "\n<pre><code>NSContactAgent agent;\nNSContactEntity res = agent.GetMyContact();</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.GetMyContacts
  commentId: M:CRMScript.NetServer.NSContactAgent.GetMyContacts
  id: 'GetMyContacts'
  so.intellisense: NSContactAgent.GetMyContacts
  langs:
  - crmscript
  name: 'GetMyContacts'
  nameWithType: NSContactAgent.GetMyContacts
  fullName: CRMScript.NetServer.NSContactAgent.GetMyContacts
  type: Method
  summary: "\nGetting the contacts where the user currently logged in is set as contact owner.<p></p>\n<strong>Returns:</strong>NSContact[]<p></p>\n<pre><code>NSContactAgent agent;\nNSContact[] res = agent.GetMyContacts();</code></pre>\n"
  remarks: 
  syntax: 
    content: NSContact[] GetMyContacts()
    parameters:
    return:
      type: CRMScript.NetServer.NSContact[]
  example: 
  - "\n<pre><code>NSContactAgent agent;\nNSContact[] res = agent.GetMyContacts();</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.GetMyRecentContacts
  commentId: M:CRMScript.NetServer.NSContactAgent.GetMyRecentContacts
  id: 'GetMyRecentContacts'
  so.intellisense: NSContactAgent.GetMyRecentContacts
  langs:
  - crmscript
  name: 'GetMyRecentContacts'
  nameWithType: NSContactAgent.GetMyRecentContacts
  fullName: CRMScript.NetServer.NSContactAgent.GetMyRecentContacts
  type: Method
  summary: "\nMethod that returns a set of initial contacts. This could be the contacts in a favorites selection, the history list, the diary, or from all sources. If retrieved from the diary it will get appointments for the current and the next day.\n"
  remarks: "\n<ul><li>Enum: 0 = Unknown</li><li>Enum: 1 = History</li><li>Enum: 2 = Diary</li><li>Enum: 4 = Favorites</li><li>Enum: 7 = All</li></ul>\n"
  syntax: 
    content: NSContact[] GetMyRecentContacts(Integer sourceType)
    parameters:
    - id: sourceType
      type: CRMScript.Global.Integer
      description: 
    return:
      type: CRMScript.NetServer.NSContact[]
  example: 
  - "\n<pre><code>NSContactAgent agent;\nInteger sourceType;\nNSContact[] res = agent.GetMyRecentContacts(sourceType);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.GetNameDepartmentDuplicates
  commentId: M:CRMScript.NetServer.NSContactAgent.GetNameDepartmentDuplicates
  id: 'GetNameDepartmentDuplicates'
  so.intellisense: NSContactAgent.GetNameDepartmentDuplicates
  langs:
  - crmscript
  name: 'GetNameDepartmentDuplicates'
  nameWithType: NSContactAgent.GetNameDepartmentDuplicates
  fullName: CRMScript.NetServer.NSContactAgent.GetNameDepartmentDuplicates
  type: Method
  summary: "\nGet duplicates based on the contact name and department\n"
  remarks: 
  syntax: 
    content: NSDuplicateEntry[] GetNameDepartmentDuplicates(String name, String department)
    parameters:
    - id: name
      type: CRMScript.Global.String
      description: 
    - id: department
      type: CRMScript.Global.String
      description: 
    return:
      type: CRMScript.NetServer.NSDuplicateEntry[]
  example: 
  - "\n<pre><code>NSContactAgent agent;\nString name;\nString department;\nNSDuplicateEntry[] res = agent.GetNameDepartmentDuplicates(name, department);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.GetPersons
  commentId: M:CRMScript.NetServer.NSContactAgent.GetPersons
  id: 'GetPersons'
  so.intellisense: NSContactAgent.GetPersons
  langs:
  - crmscript
  name: 'GetPersons'
  nameWithType: NSContactAgent.GetPersons
  fullName: CRMScript.NetServer.NSContactAgent.GetPersons
  type: Method
  summary: "\nReturns an array of all the contact persons for the company card.<p></p>\n<strong>Returns:</strong>NSPerson[]\n"
  remarks: 
  syntax: 
    content: NSPerson[] GetPersons(Integer contactId)
    parameters:
    - id: contactId
      type: CRMScript.Global.Integer
      description: 
    return:
      type: CRMScript.NetServer.NSPerson[]
  example: 
  - "\n<pre><code>NSContactAgent agent;\nInteger contactId;\nNSPerson[] res = agent.GetPersons(contactId);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.GetQuoteVersionAddresses
  commentId: M:CRMScript.NetServer.NSContactAgent.GetQuoteVersionAddresses
  id: 'GetQuoteVersionAddresses'
  so.intellisense: NSContactAgent.GetQuoteVersionAddresses
  langs:
  - crmscript
  name: 'GetQuoteVersionAddresses'
  nameWithType: NSContactAgent.GetQuoteVersionAddresses
  fullName: CRMScript.NetServer.NSContactAgent.GetQuoteVersionAddresses
  type: Method
  summary: "\nGet the associated billing and invoice quote version addresses. These addresses might be address on the contact, or a custom address.\n"
  remarks: 
  syntax: 
    content: NSAddress[] GetQuoteVersionAddresses(Integer quoteVersionId)
    parameters:
    - id: quoteVersionId
      type: CRMScript.Global.Integer
      description: 
    return:
      type: CRMScript.NetServer.NSAddress[]
  example: 
  - "\n<pre><code>NSContactAgent agent;\nInteger quoteVersionId;\nNSAddress[] res = agent.GetQuoteVersionAddresses(quoteVersionId);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.IsNumberValid
  commentId: M:CRMScript.NetServer.NSContactAgent.IsNumberValid
  id: 'IsNumberValid'
  so.intellisense: NSContactAgent.IsNumberValid
  langs:
  - crmscript
  name: 'IsNumberValid'
  nameWithType: NSContactAgent.IsNumberValid
  fullName: CRMScript.NetServer.NSContactAgent.IsNumberValid
  type: Method
  summary: "\nChecks if the number is unique or required. The setting is configured from admin under system options.<p></p>\n<strong>Returns:</strong>Bool\n"
  remarks: 
  syntax: 
    content: Bool IsNumberValid(Integer contactId, String number)
    parameters:
    - id: contactId
      type: CRMScript.Global.Integer
      description: 
    - id: number
      type: CRMScript.Global.String
      description: 
    return:
      type: CRMScript.Global.Bool
  example: 
- uid: CRMScript.NetServer.NSContactAgent.Merge
  commentId: M:CRMScript.NetServer.NSContactAgent.Merge
  id: 'Merge'
  so.intellisense: NSContactAgent.Merge
  langs:
  - crmscript
  name: 'Merge'
  nameWithType: NSContactAgent.Merge
  fullName: CRMScript.NetServer.NSContactAgent.Merge
  type: Method
  summary: "\nMerge two contacts. The destination contact will remain.\n"
  remarks: 
  syntax: 
    content: Void Merge(Integer sourceContactId, Integer destinationContactId, Bool mergeIdenticalPersons, Bool replaceEmptyFieldsOnDestination)
    parameters:
    - id: sourceContactId
      type: CRMScript.Global.Integer
      description: 
    - id: destinationContactId
      type: CRMScript.Global.Integer
      description: 
    - id: mergeIdenticalPersons
      type: CRMScript.Global.Bool
      description: 
    - id: replaceEmptyFieldsOnDestination
      type: CRMScript.Global.Bool
      description: 
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.NetServer.NSContactAgent.#ctor
  commentId: M:CRMScript.NetServer.NSContactAgent.#ctor
  id: '#ctor'
  so.intellisense: Void.NSContactAgent
  langs:
  - crmscript
  name: '#ctor'
  nameWithType: NSContactAgent.#ctor
  fullName: CRMScript.NetServer.NSContactAgent.#ctor
  type: Constructor
  summary: "\nContact (company) data services.\n"
  remarks: 
  syntax: 
    content: NSContactAgent
  example: 
  - "\n<pre><code>NSContactAgent agent;\nagent.callMethod(arg1, arg2);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.SaveContactEntity
  commentId: M:CRMScript.NetServer.NSContactAgent.SaveContactEntity
  id: 'SaveContactEntity'
  so.intellisense: NSContactAgent.SaveContactEntity
  langs:
  - crmscript
  name: 'SaveContactEntity'
  nameWithType: NSContactAgent.SaveContactEntity
  fullName: CRMScript.NetServer.NSContactAgent.SaveContactEntity
  type: Method
  summary: "\nCRMScript method in the NSContactAgent class that creates or updates an NSContactEntityUpdates the existing NSContactEntity or creates a new NSContactEntity if the ID parameter is 0.<p></p>\nReturns the new or updated NSContactEntity<p></p>\n<code>NSContactEntity SaveContactEntity(NSContactEntity contactEntity)</code>\n"
  remarks: 
  syntax: 
    content: SaveContactEntity()
    parameters:
    - id: contactEntity
      type: CRMScript.NetServer.NSContactEntity
      description: The entity to save.
  example: 
  - "\n<pre><code>NSContact  agent;\nNSContactEntity thing = agent.CreateDefaultContactEntity();\nthing = agent.SaveContactEntity(thing);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.SaveQuoteVersionAddress
  commentId: M:CRMScript.NetServer.NSContactAgent.SaveQuoteVersionAddress
  id: 'SaveQuoteVersionAddress'
  so.intellisense: NSContactAgent.SaveQuoteVersionAddress
  langs:
  - crmscript
  name: 'SaveQuoteVersionAddress'
  nameWithType: NSContactAgent.SaveQuoteVersionAddress
  fullName: CRMScript.NetServer.NSContactAgent.SaveQuoteVersionAddress
  type: Method
  summary: "\nSave a custom quote version address.\n"
  remarks: "\n<ul><li>Enum: 0 = Unknown</li><li>Enum: 1 = ContactPostalAddress</li><li>Enum: 2 = ContactStreetAddress</li><li>Enum: 16387 = PersonPrivateAddress</li><li>Enum: 8196 = QuoteBillingAddress</li><li>Enum: 8197 = QuoteShippingAddress</li></ul>\n"
  syntax: 
    content: NSAddress SaveQuoteVersionAddress(Integer quoteVersionId, NSAddress address, Integer addressType, Integer countryId)
    parameters:
    - id: quoteVersionId
      type: CRMScript.Global.Integer
      description: 
    - id: address
      type: CRMScript.NetServer.NSAddress
      description: 
    - id: addressType
      type: CRMScript.Global.Integer
      description: 
    - id: countryId
      type: CRMScript.Global.Integer
      description: 
    return:
      type: CRMScript.NetServer.NSAddress
  example: 
  - "\n<pre><code>NSContactAgent agent;\nInteger quoteVersionId;\nNSAddress address;\nInteger addressType;\nInteger countryId;\nNSAddress res = agent.SaveQuoteVersionAddress(quoteVersionId, address, addressType, countryId);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.SetDuplicateRulesStatus
  commentId: M:CRMScript.NetServer.NSContactAgent.SetDuplicateRulesStatus
  id: 'SetDuplicateRulesStatus'
  so.intellisense: NSContactAgent.SetDuplicateRulesStatus
  langs:
  - crmscript
  name: 'SetDuplicateRulesStatus'
  nameWithType: NSContactAgent.SetDuplicateRulesStatus
  fullName: CRMScript.NetServer.NSContactAgent.SetDuplicateRulesStatus
  type: Method
  summary: "\nSet which duplicate rules should be active or not\n"
  remarks: 
  syntax: 
    content: Void SetDuplicateRulesStatus(NSDuplicateRule[] rules)
    parameters:
    - id: rules
      type: CRMScript.NetServer.NSDuplicateRule[]
      description: 
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.NetServer.NSContactAgent.Undelete
  commentId: M:CRMScript.NetServer.NSContactAgent.Undelete
  id: 'Undelete'
  so.intellisense: NSContactAgent.Undelete
  langs:
  - crmscript
  name: 'Undelete'
  nameWithType: NSContactAgent.Undelete
  fullName: CRMScript.NetServer.NSContactAgent.Undelete
  type: Method
  summary: "\nThis entity supports Soft Delete. Call this method to Undelete a previously soft-deleted record\n"
  remarks: 
  syntax: 
    content: Void Undelete(Integer id)
    parameters:
    - id: id
      type: CRMScript.Global.Integer
      description: 
    return:
      type: CRMScript.Global.Void
  example: 
  - "\n<pre><code>NSContactAgent agent;\nInteger id;\nagent.Undelete(id);</code></pre>\n"
- uid: CRMScript.NetServer.NSContactAgent.ValidateContactEntity
  commentId: M:CRMScript.NetServer.NSContactAgent.ValidateContactEntity
  id: 'ValidateContactEntity'
  so.intellisense: NSContactAgent.ValidateContactEntity
  langs:
  - crmscript
  name: 'ValidateContactEntity'
  nameWithType: NSContactAgent.ValidateContactEntity
  fullName: CRMScript.NetServer.NSContactAgent.ValidateContactEntity
  type: Method
  summary: "\nCheck that entity is ready for saving, return error messages by field.\n"
  remarks: 
  syntax: 
    content: StringDictionary ValidateContactEntity(NSContactEntity contactEntity)
    parameters:
    - id: contactEntity
      type: CRMScript.NetServer.NSContactEntity
      description: 
    return:
      type: CRMScript.Global.StringDictionary
  example: 
  - "\n<pre><code>NSContactAgent agent;\nNSContactEntity contactEntity;\nStringDictionary res = agent.ValidateContactEntity(contactEntity);</code></pre>\n"
references:
- uid: CRMScript.NetServer.NSContactAgent
  commentId: T:CRMScript.NetServer.NSContactAgent
  isExternal: true
  name: NSContactAgent
  nameWithType: NSContactAgent
  fullName: CRMScript.NetServer.NSContactAgent
- uid: CRMScript.Global.Integer
  commentId: T:CRMScript.Global.Integer
  isExternal: true
  name: Integer
  nameWithType: Integer
  fullName: CRMScript.Global.Integer
- uid: CRMScript.NetServer.NSPersonEntity
  commentId: T:CRMScript.NetServer.NSPersonEntity
  isExternal: true
  name: NSPersonEntity
  nameWithType: NSPersonEntity
  fullName: CRMScript.NetServer.NSPersonEntity
- uid: CRMScript.NetServer.NSContactEntity
  commentId: T:CRMScript.NetServer.NSContactEntity
  isExternal: true
  name: NSContactEntity
  nameWithType: NSContactEntity
  fullName: CRMScript.NetServer.NSContactEntity
- uid: CRMScript.Global.String
  commentId: T:CRMScript.Global.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: CRMScript.Global.String
- uid: CRMScript.Global.Bool
  commentId: T:CRMScript.Global.Bool
  isExternal: true
  name: Bool
  nameWithType: Bool
  fullName: CRMScript.Global.Bool
- uid: CRMScript.NetServer.NSDuplicateEntry
  commentId: T:CRMScript.NetServer.NSDuplicateEntry
  isExternal: true
  name: NSDuplicateEntry
  nameWithType: NSDuplicateEntry
  fullName: CRMScript.NetServer.NSDuplicateEntry
- uid: CRMScript.Global.Void
  commentId: T:CRMScript.Global.Void
  isExternal: true
  name: Void
  nameWithType: Void
  fullName: CRMScript.Global.Void
- uid: CRMScript.NetServer.NSContact
  commentId: T:CRMScript.NetServer.NSContact
  isExternal: true
  name: NSContact
  nameWithType: NSContact
  fullName: CRMScript.NetServer.NSContact
- uid: CRMScript.Global.Integer[]
  isExternal: true
  name: Integer[]
  nameWithType: Integer[]
  fullName: CRMScript.Global.Integer[]
  spec.crmscript:
  - uid: CRMScript.Global.Integer
    isExternal: true
    name: Integer
    nameWithType: Integer
    fullName: CRMScript.Global.Integer
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: CRMScript.Global.Integer
  commentId: T:CRMScript.Global.Integer
  isExternal: true
  name: Integer
  nameWithType: Integer
  fullName: CRMScript.Global.Integer
- uid: CRMScript.NetServer.NSContact[]
  isExternal: true
  name: NSContact[]
  nameWithType: NSContact[]
  fullName: CRMScript.NetServer.NSContact[]
  spec.crmscript:
  - uid: CRMScript.NetServer.NSContact
    isExternal: true
    name: NSContact
    nameWithType: NSContact
    fullName: CRMScript.NetServer.NSContact
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: CRMScript.NetServer.NSContact
  commentId: T:CRMScript.NetServer.NSContact
  isExternal: true
  name: NSContact
  nameWithType: NSContact
  fullName: CRMScript.NetServer.NSContact
- uid: CRMScript.NetServer.NSContactSummary
  commentId: T:CRMScript.NetServer.NSContactSummary
  isExternal: true
  name: NSContactSummary
  nameWithType: NSContactSummary
  fullName: CRMScript.NetServer.NSContactSummary
- uid: CRMScript.NetServer.NSDuplicateRule[]
  isExternal: true
  name: NSDuplicateRule[]
  nameWithType: NSDuplicateRule[]
  fullName: CRMScript.NetServer.NSDuplicateRule[]
  spec.crmscript:
  - uid: CRMScript.NetServer.NSDuplicateRule
    isExternal: true
    name: NSDuplicateRule
    nameWithType: NSDuplicateRule
    fullName: CRMScript.NetServer.NSDuplicateRule
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: CRMScript.NetServer.NSDuplicateRule
  commentId: T:CRMScript.NetServer.NSDuplicateRule
  isExternal: true
  name: NSDuplicateRule
  nameWithType: NSDuplicateRule
  fullName: CRMScript.NetServer.NSDuplicateRule
- uid: CRMScript.NetServer.NSDuplicateEntry[]
  isExternal: true
  name: NSDuplicateEntry[]
  nameWithType: NSDuplicateEntry[]
  fullName: CRMScript.NetServer.NSDuplicateEntry[]
  spec.crmscript:
  - uid: CRMScript.NetServer.NSDuplicateEntry
    isExternal: true
    name: NSDuplicateEntry
    nameWithType: NSDuplicateEntry
    fullName: CRMScript.NetServer.NSDuplicateEntry
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: CRMScript.NetServer.NSDuplicateEntry
  commentId: T:CRMScript.NetServer.NSDuplicateEntry
  isExternal: true
  name: NSDuplicateEntry
  nameWithType: NSDuplicateEntry
  fullName: CRMScript.NetServer.NSDuplicateEntry
- uid: CRMScript.Global.DateTime
  commentId: T:CRMScript.Global.DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: CRMScript.Global.DateTime
- uid: CRMScript.NetServer.NSContactActivity[]
  isExternal: true
  name: NSContactActivity[]
  nameWithType: NSContactActivity[]
  fullName: CRMScript.NetServer.NSContactActivity[]
  spec.crmscript:
  - uid: CRMScript.NetServer.NSContactActivity
    isExternal: true
    name: NSContactActivity
    nameWithType: NSContactActivity
    fullName: CRMScript.NetServer.NSContactActivity
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: CRMScript.NetServer.NSContactActivity
  commentId: T:CRMScript.NetServer.NSContactActivity
  isExternal: true
  name: NSContactActivity
  nameWithType: NSContactActivity
  fullName: CRMScript.NetServer.NSContactActivity
- uid: CRMScript.NetServer.NSPerson[]
  isExternal: true
  name: NSPerson[]
  nameWithType: NSPerson[]
  fullName: CRMScript.NetServer.NSPerson[]
  spec.crmscript:
  - uid: CRMScript.NetServer.NSPerson
    isExternal: true
    name: NSPerson
    nameWithType: NSPerson
    fullName: CRMScript.NetServer.NSPerson
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: CRMScript.NetServer.NSPerson
  commentId: T:CRMScript.NetServer.NSPerson
  isExternal: true
  name: NSPerson
  nameWithType: NSPerson
  fullName: CRMScript.NetServer.NSPerson
- uid: CRMScript.NetServer.NSAddress[]
  isExternal: true
  name: NSAddress[]
  nameWithType: NSAddress[]
  fullName: CRMScript.NetServer.NSAddress[]
  spec.crmscript:
  - uid: CRMScript.NetServer.NSAddress
    isExternal: true
    name: NSAddress
    nameWithType: NSAddress
    fullName: CRMScript.NetServer.NSAddress
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: CRMScript.NetServer.NSAddress
  commentId: T:CRMScript.NetServer.NSAddress
  isExternal: true
  name: NSAddress
  nameWithType: NSAddress
  fullName: CRMScript.NetServer.NSAddress
- uid: CRMScript.NetServer.NSAddress
  commentId: T:CRMScript.NetServer.NSAddress
  isExternal: true
  name: NSAddress
  nameWithType: NSAddress
  fullName: CRMScript.NetServer.NSAddress
- uid: CRMScript.Global.StringDictionary
  commentId: T:CRMScript.Global.StringDictionary
  isExternal: true
  name: StringDictionary
  nameWithType: StringDictionary
  fullName: CRMScript.Global.StringDictionary