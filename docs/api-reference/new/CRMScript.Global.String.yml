### YamlMime:ManagedReference
items:
- uid: CRMScript.Global.String
  commentId: T:CRMScript.Global.String
  id: String
  langs:
  - crmscript
  children:
    - CRMScript.Global.String.#ctor(String)
# todo: return to add more constuctors from string-type.md after introducing Byte and NSStream
    - CRMScript.Global.String.getLength()
    - CRMScript.Global.String.toLower()
    - CRMScript.Global.String.toUpper()
    - CRMScript.Global.String.isLower()
    - CRMScript.Global.String.isUpper()
    - CRMScript.Global.String.equals(String)
    - CRMScript.Global.String.equalsIgnoreCase(String)
    - CRMScript.Global.String.beginsWith(String)
    - CRMScript.Global.String.caseBeginsWith(String)
    - CRMScript.Global.String.endsWith(String)
    - CRMScript.Global.String.caseEndsWith(String)
    - CRMScript.Global.String.compare(String)
    - CRMScript.Global.String.caseCompare(String)
    - CRMScript.Global.String.append(String)
    - CRMScript.Global.String.substitute(String, String)
    - CRMScript.Global.String.find(String)
    - CRMScript.Global.String.findLast(String)
    - CRMScript.Global.String.subString(Integer, Integer)
    - CRMScript.Global.String.until(String)
    - CRMScript.Global.String.before(String)
    - CRMScript.Global.String.beforeLast(String)
    - CRMScript.Global.String.after(String)
    - CRMScript.Global.String.afterLast(String)
    - CRMScript.Global.String.split(String)
    - CRMScript.Global.String.isAlpha()
    - CRMScript.Global.String.isDigit()
    - CRMScript.Global.String.isAlphanumeric()
    - CRMScript.Global.String.isNull()
    - CRMScript.Global.String.isEmpty()
  name: String
  nameWithType: String
  fullName: CRMScript.Global.String
  type: Class
  summary: "\nA text string is a sequence of characters written with quotes.<p></p>\nYou can use single or double quotes, but they must always come in pairs. Quotes can also be nested, by alternating between single and double quotes.\n"
  example:
  - "\n<pre><code>String myCompany = &quot;SuperOffice&quot;;\nString myLocation = 'Oslo';\nString onion = &quot;The 'onion' has many layers.&quot;;</code></pre>\n"
- uid: CRMScript.Global.String.#ctor(String)
  commentId: M:CRMScript.Global.String.#ctor(String)
  id: '#ctor(String)'
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: String(String)
  nameWithType: String.String(String)
  fullName: CRMScript.Global.String.String(String)
  type: Constructor
  summary: "\nPass a value to copy into a new object.\n"
  syntax:
    content: String String(String value)
- uid: CRMScript.Global.String.getLength()
  commentId: M:CRMScript.Global.String.getLength()
  id: getLength()
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: getLength()
  nameWithType: String.getLength()
  fullName: CRMScript.Global.String.getLength()
  type: Method
  summary: "\nFinds the length of a string. Returns the number of characters as an Integer.\n"
  example:
  - "\n<pre><code>String txt = &quot;Wergelandsveien&quot;;\nprintLine(txt.getLength().toString());</code></pre>\n"
  syntax:
    content: Integer getLength()
    parameters: []
    return:
      type: CRMScript.Global.Integer
- uid: CRMScript.Global.String.toLower()
  commentId: M:CRMScript.Global.String.toLower()
  id: toLower()
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: toLower()
  nameWithType: String.toLower()
  fullName: CRMScript.Global.String.toLower()
  type: Method
  summary: "\nConverts the string to its lower-case representation (all lower-case).\n"
  example:
  - "\n<pre><code>String s = &quot;SuperOffice&quot;;\nString sLow = s.toLower();</code></pre>\n"
  syntax:
    content: String toLower()
    parameters: []
    return:
      type: CRMScript.Global.String
- uid: CRMScript.Global.String.toUpper()
  commentId: M:CRMScript.Global.String.toUpper()
  id: toUpper()
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: toUpper()
  nameWithType: String.toUpper()
  fullName: CRMScript.Global.String.toUpper()
  type: Method
  summary: "\nConverts the string to its upper-case representation (all upper-case).\n"
  example:
  - "\n<pre><code>String s = &quot;SuperOffice&quot;;\nString sUp = s.toUpper();</code></pre>\n"
  syntax:
    content: String toUpper()
    parameters: []
    return:
      type: CRMScript.Global.String
- uid: CRMScript.Global.String.isLower()
  commentId: M:CRMScript.Global.String.isLower()
  id: isLower()
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: isLower()
  nameWithType: String.isLower()
  fullName: CRMScript.Global.String.isLower()
  type: Method
  summary: "\nDetermines if the string contains lower-case characters only. Will return true if no upper-case characters are found, otherwise false.\n"
  remarks: "\nIf any white-space characters are present in the string, the method will return false!\n"
  syntax:
    content: Bool isLower()
    parameters: []
    return:
      type: CRMScript.Global.Bool
- uid: CRMScript.Global.String.isUpper()
  commentId: M:CRMScript.Global.String.isUpper()
  id: isUpper()
  langs:
  - crmscript
  parent: CRMScript.Global.
  name: isUpper()
  nameWithType: String.isUpper()
  fullName: CRMScript.Global.String.isUpper()
  type: Method
  summary: "\nDetermines if the string contains upper-case characters only. Will return true if no lower-case characters are found, otherwise false.\n"
  remarks: "\nIf any white-space characters are present in the string, the method will return false!\n"
  syntax:
    content: Bool isUpper()
    parameters: []
    return:
      type: CRMScript.Global.Bool
- uid: CRMScript.Global.String.equals(String)
  commentId: M:CRMScript.Global.String.equals(String)
  id: equals(String)
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: equals(String)
  nameWithType: String.equals(String)
  fullName: CRMScript.Global.String.equals(String)
  type: Method
  summary: "\nCase sensitive comparison.\n"
  example:
  - "\n<pre><code>String s1 = &quot;apple&quot;;\nString s2 = &quot;Apple&quot;;\nif (s1.equals(s2))\n\tprint(s1 + &quot; is identical to &quot; + s2);\nelse\n\tprint(s1 + &quot; differs from &quot; + s2);</code></pre>\n"
  syntax:
    content: Bool equals(String value)
    parameters:
    - id: value
      type: CRMScript.Global.String
      description: The string to compare with.
    return:
      type: CRMScript.Global.Bool
- uid: CRMScript.Global.String.equalsIgnoreCase(String)
  commentId: M:CRMScript.Global.String.equalsIgnoreCase(String)
  id: equalsIgnoreCase(String)
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: equalsIgnoreCase(String)
  nameWithType: String.equalsIgnoreCase(String)
  fullName: CRMScript.Global.String.equalsIgnoreCase(String)
  type: Method
  summary: "\nCase ignorant comparison. Same as using toLower() on both strings before calling equals().\n"
  example:
  - "\n<pre><code>String s1 = &quot;apple&quot;;\nString s2 = &quot;Apple&quot;;\nif (s1.equalsIgnoreCase(s2))\t\nprint(s1 + &quot; is identical to &quot; + s2);\nelse\t\nprint(s1 + &quot; differs from &quot; + s2);</code></pre>\n"
  syntax:
    content: Bool equalsIgnoreCase(String value)
    parameters:
    - id: value
      type: CRMScript.Global.String
      description: The string to compare with.
    return:
      type: CRMScript.Global.Bool
- uid: CRMScript.Global.String.beginsWith(String)
  commentId: M:CRMScript.Global.String.beginsWith(String)
  id: beginsWith(String)
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: beginsWith(String)
  nameWithType: String.beginsWith(String)
  fullName: CRMScript.Global.String.beginsWith(String)
  type: Method
  summary: "\nMatching start of a string. The pattern you wish to match against must be given as an input parameter.<p></p>\nThe methods will return true if the beginning of your string matches the pattern, otherwise false.\n"
  remarks: "\nCase sensitive. To ignore case, use caseBeginsWith() instead.\n"
  example:
  - "\n<pre><code>String s1 = &quot;apple&quot;;\nString s2 = &quot;appletree&quot;;\nif (s2.beginsWith(s1))\n\tprint(s2 + &quot; begins with &quot; + s1);\nelse\n\tprint(&quot;No match found.&quot;);</code></pre>\n"
  syntax:
    content: Bool beginsWith(String substring)
    parameters:
    - id: substring
      type: CRMScript.Global.String
      description: The pattern you wish to match against.
    return:
      type: CRMScript.Global.Bool
- uid: CRMScript.Global.String.caseBeginsWith(String)
  commentId: M:CRMScript.Global.String.caseBeginsWith(String)
  id: caseBeginsWith(String)
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: caseBeginsWith(String)
  nameWithType: String.caseBeginsWith(String)
  fullName: CRMScript.Global.String.caseBeginsWith(String)
  type: Method
  summary: "\nMatching start of a string. The pattern you wish to match against must be given as an input parameter.<p></p>\nThe methods will return true if the beginning of your string matches the pattern, otherwise false.\n"
  syntax:
    content: Bool caseBeginsWith(String substring)
    parameters:
    - id: substring
      type: CRMScript.Global.String
      description: The pattern you wish to match against.
    return:
      type: CRMScript.Global.Bool
- uid: CRMScript.Global.String.endsWith(String)
  commentId: M:CRMScript.Global.String.endsWith(String)
  id: endsWith(String)
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: endsWith(String)
  nameWithType: String.endsWith(String)
  fullName: CRMScript.Global.String.endsWith(String)
  type: Method
  summary: "\nMatching end of a string. The pattern you wish to match against must be given as an input parameter.<p></p>\nThe methods will return true if the end of your string matches the pattern, otherwise false.\n"
  remarks: "\nCase sensitive. To ignore case, use caseEndsWith() instead.\n"
  example:
  - "\n<pre><code>String s1 = &quot;dog&quot;;\nString s2 = &quot;hotdog&quot;;\nif (s2.endsWith(s1))\n\tprint(s2 + &quot; ends with &quot; + s1);\nelse\n\tprint(&quot;No match found.&quot;);</code></pre>\n"
  syntax:
    content: Bool endsWith(String substring)
    parameters:
    - id: substring
      type: CRMScript.Global.String
      description: The pattern you wish to match against.
    return:
      type: CRMScript.Global.Bool
- uid: CRMScript.Global.String.caseEndsWith(String)
  commentId: M:CRMScript.Global.String.caseEndsWith(String)
  id: caseEndsWith(String)
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: caseEndsWith(String)
  nameWithType: String.caseEndsWith(String)
  fullName: CRMScript.Global.String.caseEndsWith(String)
  type: Method
  summary: "\nMatching end of a string. The pattern you wish to match against must be given as an input parameter.<p></p>\nThe methods will return true if the end of your string matches the pattern, otherwise false.\n"
  syntax:
    content: Bool caseEndsWith(String substring)
    parameters:
    - id: substring
      type: CRMScript.Global.String
      description: The pattern you wish to match against.
    return:
      type: CRMScript.Global.Bool
- uid: CRMScript.Global.String.compare(String)
  commentId: M:CRMScript.Global.String.compare(String)
  id: compare(String)
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: compare(String)
  nameWithType: String.compare(String)
  fullName: CRMScript.Global.String.compare(String)
  type: Method
  summary: "\nCase sensitive comparison.<p></p>\nTwo strings are lexicographic identical if they are the same length and they also contain the same characters in the same position.\n"
  example:
  - "\n<pre><code>String s1 = &quot;a&quot;;\nString s2 = &quot;B&quot;;\nif (s1.compare(s2) < 0)\n\tprint(s1 + &quot; comes before &quot; + s2);</code></pre>\n"
  syntax:
    content: Integer compare(String value)
    parameters:
    - id: value
      type: CRMScript.Global.String
      description: The string to compare with (s2).
    return:
      type: CRMScript.Global.Integer
- uid: CRMScript.Global.String.caseCompare(String)
  commentId: M:CRMScript.Global.String.caseCompare(String)
  id: caseCompare(String)
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: caseCompare(String)
  nameWithType: String.caseCompare(String)
  fullName: CRMScript.Global.String.caseCompare(String)
  type: Method
  summary: "\nCase ignorant comparison. Same as applying the standard dictionary or alphabetic order.\n"
  example:
  - "\n<pre><code>String s1 = &quot;a&quot;;\nString s2 = &quot;B&quot;;\nInteger sortOrder = s1.caseCompare(s2);</code></pre>\n"
  syntax:
    content: Integer caseCompare(String value)
    parameters:
    - id: value
      type: CRMScript.Global.String
      description: The string to compare with (s2).
    return:
      type: CRMScript.Global.Integer
- uid: CRMScript.Global.String.append(String)
  commentId: M:CRMScript.Global.String.append(String)
  id: append(String)
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: append(String)
  nameWithType: String.append(String)
  fullName: CRMScript.Global.String.append(String)
  type: Method
  summary: "\nConcatenates two strings and alters the original string.\n"
  remarks: "\nUsing the append() method is currently faster than +=.\n"
  example:
  - "\n<pre><code>s1 = s1 + s2;\ns1 += s2;\ns1.append(s2);</code></pre>\n"
  syntax:
    content: append(String value)
    parameters:
    - id: value
      type: CRMScript.Global.String
      description: The string to append to your original string.
    return:
- uid: CRMScript.Global.String.substitute(String, String)
  commentId: M:CRMScript.Global.String.substitute(String, String)
  id: substitute(String, String)
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: substitute(String, String)
  nameWithType: String.substitute(String, String)
  fullName: CRMScript.Global.String.substitute(String, String)
  type: Method
  summary: "\nInside your string, substitute all occurrences of one substring with another.\n"
  remarks: "\nText substitution works as search-and-replace and will update all occurrences.\n"
  example:
  - "\n<pre><code>String s = &quot;Superoffice&quot;;\nprint(s.substitute(&quot;o&quot;,&quot;O&quot;));</code></pre>\n"
  syntax:
    content: String substitute(String src, String dest)
    parameters:
    - id: src
      type: CRMScript.Global.String
      description: The string to search for and replace.
    - id: dest
      type: CRMScript.Global.String
      description: The string to replace with.
    return:
      type: CRMScript.Global.String
- uid: CRMScript.Global.String.find(String)
  commentId: M:CRMScript.Global.String.find(String)
  id: find(String)
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: find(String)
  nameWithType: String.find(String)
  fullName: CRMScript.Global.String.find(String)
  type: Method
  summary: "\nFinds the 1st occurrence of the substring and returns the index it starts at.\n"
  example:
  - "\n<pre><code>String s = &quot;SuperOffice&quot;;\nprintLine(s.find(&quot;O&quot;).toString());</code></pre>\n"
  syntax:
    content: Integer find(String substring)
    parameters:
    - id: substring
      type: CRMScript.Global.String
      description: The string to find.
    return:
      type: CRMScript.Global.Integer
- uid: CRMScript.Global.String.findLast(String)
  commentId: M:CRMScript.Global.String.findLast(String)
  id: findLast(String)
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: findLast(String)
  nameWithType: String.findLast(String)
  fullName: CRMScript.Global.String.findLast(String)
  type: Method
  summary: "\nSame as find() except it will return the position of the last occurrence of the pattern.\n"
  example:
  - "\n<pre><code>String s = &quot;SuperOffice&quot;;\nprintLine(s.find(&quot;O&quot;).toString());</code></pre>\n"
  syntax:
    content: Integer find(String substring)
    parameters:
    - id: substring
      type: CRMScript.Global.String
      description: The string to find.
    return:
      type: CRMScript.Global.Integer
- uid: CRMScript.Global.String.subString(Integer, Integer)
  commentId: M:CRMScript.Global.String.subString(Integer, Integer)
  id: subString(Integer, Integer)
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: subString(Integer, Integer)
  nameWithType: String.subString(Integer, Integer)
  fullName: CRMScript.Global.String.subString(Integer, Integer)
  type: Method
  summary: "\nCreates a new String of a given length. It will copy characters from the original string starting at the given position.\n"
  remarks: "\nThe position must be less than s.getLength().\n"
  example:
  - "\n<pre><code>String s = &quot;SuperOffice&quot;;\nString t = s.subString(5,6);\nprint(t);</code></pre>\n"
  syntax:
    content: String subString(Integer pos, Integer len)
    parameters:
    - id: pos
      type: CRMScript.Global.Integer
      description: The position in the original string to start copy characters from.
    - id: len
      type: CRMScript.Global.Integer
      description: The length of the new string.
    return:
      type: CRMScript.Global.String
- uid: CRMScript.Global.String.until(String)
  commentId: M:CRMScript.Global.String.until(String)
  id: until(String)
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: until(String)
  nameWithType: String.until(String)
  fullName: CRMScript.Global.String.until(String)
  type: Method
  summary: "\nIf you don't know the exact segment length you wish to extract, one option is to copy from start until you encounter a given pattern (1st occurrence).<p></p>\nIf the pattern is not found, a copy of this original string is returned.\n"
  example:
  - "\n<pre><code>String s = &quot;name := test&quot;;\nString t = s.until(&quot;:=&quot;);\nprint(t);</code></pre>\n"
  syntax:
    content: String until(String pattern)
    parameters:
    - id: pattern
      type: CRMScript.Global.String
      description: The pattern where to stop copying.
    return:
      type: CRMScript.Global.String
- uid: CRMScript.Global.String.before(String)
  commentId: M:CRMScript.Global.String.before(String)
  id: before(String)
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: before(String)
  nameWithType: String.before(String)
  fullName: CRMScript.Global.String.before(String)
  type: Method
  summary: "\nSame usage and result as until().\n"
  syntax:
    content: String before(String pattern)
    parameters:
    - id: pattern
      type: CRMScript.Global.String
      description: The pattern where to stop copying.
    return:
      type: CRMScript.Global.String
- uid: CRMScript.Global.String.beforeLast(String)
  commentId: M:CRMScript.Global.String.beforeLast(String)
  id: beforeLast(String)
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: beforeLast(String)
  nameWithType: String.beforeLast(String)
  fullName: CRMScript.Global.String.beforeLast(String)
  type: Method
  summary: "\nSimilar to before(), but will continue copying until the last occurrence of the pattern rather than stopping at the 1st.<p></p>\nUseful for example if you are parsing a path or URI and want everything except the document name.\n"
  example:
  - "\n<pre><code>String s = &quot;https://community.superoffice.com/sdk-doc/Reference.htm&quot;;\nString t = s.beforeLast(&quot;/&quot;);</code></pre>\n"
  syntax:
    content: String beforeLast(String pattern)
    parameters:
    - id: pattern
      type: CRMScript.Global.String
      description: The pattern where to stop copying.
    return:
      type: CRMScript.Global.String
- uid: CRMScript.Global.String.after(String)
  commentId: M:CRMScript.Global.String.after(String)
  id: after(String)
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: after(String)
  nameWithType: 
  fullName: CRMScript.Global.String.after(String)
  type: Method
  summary: "\nAnother option is to start copying after you encounter the pattern and continue extracting until you reach the end of the original string.<p></p>\nIf the pattern is not found in this, an empty string is returned.\n"
  example:
  - "\n<pre><code>String s = &quot;name := value&quot;;\nString t = s.after(&quot;:=&quot;);\nprint(t);</code></pre>\n"
  syntax:
    content: String after(String pattern)
    parameters:
    - id: pattern
      type: CRMScript.Global.String
      description: The patter where to start copying.
    return:
      type: CRMScript.Global.String
- uid: CRMScript.Global.String.afterLast(String)
  commentId: M:CRMScript.Global.String.afterLast(String)
  id: afterLast(String)
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: afterLast(String)
  nameWithType: 
  fullName: CRMScript.Global.String.afterLast(String)
  type: Method
  summary: "\nSimilar to after(), but will not start copying until after the last occurrence of the pattern rather than starting after the 1st.\n"
  syntax:
    content: String afterLast(String pattern)
    parameters:
    - id: pattern
      type: CRMScript.Global.String
      description: The patter where to start copying.
    return:
      type: CRMScript.Global.String
- uid: CRMScript.Global.String.split(String)
  commentId: M:CRMScript.Global.String.split(String)
  id: split(String)
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: split(String)
  nameWithType: String.split(String)
  fullName: CRMScript.Global.String.split(String)
  type: Method
  summary: "\nSplits the original string in multiple segments (an array of substrings). The original string is not altered.\n"
  remarks: "\nYou can't split between every character (can't use an empty string as the delimiter).<p></p>\nThe delimiter is excluded from the result.\n"
  example:
  - "\n<pre><code>String s = &quot;Live now; make now always the most precious time. Now will never come again.&quot;;\nString[] a = s.split(&quot; &quot;);</code></pre>\n"
  syntax:
    content: String[] split(String delimiter)
    parameters:
    - id: delimiter
      type: CRMScript.Global.String
      description: Where to split the string.
    return:
      type: CRMScript.Global.String[]
- uid: CRMScript.Global.String.isAlpha()
  commentId: M:CRMScript.Global.String.isAlpha()
  id: isAlpha()
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: isAlpha()
  nameWithType: String.isAlpha()
  fullName: CRMScript.Global.String.isAlpha()
  type: Method
  summary: "\nDetermines if the string exclusively contains upper-case and lower-case letters. Will return true if the restriction applies, otherwise false.\n"
  remarks: "\nIf any white-space characters are present in the string, the method will return false!\n"
  example:
  - "\n<pre><code>String s = &quot;SuperOffice&quot;;\nprint(s.isAlpha().toString())</code></pre>\n"
  syntax:
    content: Bool isAlpha()
    parameters: []
    return:
      type: CRMScript.Global.Bool
- uid: CRMScript.Global.String.isDigit()
  commentId: M:CRMScript.Global.String.isDigit()
  id: isDigit()
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: isDigit()
  nameWithType: String.isDigit()
  fullName: CRMScript.Global.String.isDigit()
  type: Method
  summary: "\nDetermines if the string contains numeric characters [0-9] only.\n"
  syntax:
    content: Bool isDigit()
    parameters: []
    return:
      type: CRMScript.Global.Bool
- uid: CRMScript.Global.String.isAlphanumeric()
  commentId: M:CRMScript.Global.String.isAlphanumeric()
  id: isAlphanumeric()
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: isAlphanumeric()
  nameWithType: String.isAlphanumeric()
  fullName: CRMScript.Global.String.isAlphanumeric()
  type: Method
  summary: "\ncombines the criteria of isAlpha() and isDigit(), and will return true if the string is restricted to any combination of lower-case and upper-case letters and digits [0-9].\n"
  syntax:
    content: Bool isAlphanumeric()
    parameters: []
    return:
      type: CRMScript.Global.Bool
- uid: CRMScript.Global.String.isNull()
  commentId: M:CRMScript.Global.String.isNull()
  id: isNull()
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: isNull()
  nameWithType: String.isNull()
  fullName: CRMScript.Global.String.isNull()
  type: Method
  summary: "\nReturns true if the string is NULL/NUL/NIL, otherwise false. See example for isEmpty().\n"
  syntax:
    content: Bool isNull()
    parameters: []
    return:
      type: CRMScript.Global.Bool
- uid: CRMScript.Global.String.isEmpty()
  commentId: M:CRMScript.Global.String.isEmpty()
  id: isEmpty()
  langs:
  - crmscript
  parent: CRMScript.Global.String
  name: isEmpty()
  nameWithType: String.isEmpty()
  fullName: CRMScript.Global.String.isEmpty()
  type: Method
  summary: "\nReturns true if the string is empty (&quot;&quot;) or NULL/NUL/NIL, meaning it contains no characters.\n"
  example:
  - "\n<pre><code>String s;\nprintLine(s.isNull().toString());\ns = &quot;&quot;;\nprintLine(s.isNull().toString());\nprintLine(s.isEmpty().toString());</code></pre>\n"
  syntax:
    content: Bool isEmpty()
    parameters: []
    return:
      type: CRMScript.Global.Bool
references:
- uid: CRMScript.Global.String
  commentId: T:CRMScript.Global.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: CRMScript.Global.String
- uid: CRMScript.Global.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: CRMScript.Global.String[]
  spec.crmscript:
  - uid: CRMScript.Global.String
    name: String
    nameWithType: String
    fullName: CRMScript.Global.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: CRMScript.Global.Integer
  commentId: T:CRMScript.Global.Integer
  isExternal: true
  name: Integer
  nameWithType: Integer
  fullName: CRMScript.Global.Integer
- uid: CRMScript.Global.Bool
  commentId: T:CRMScript.Global.Bool
  isExternal: true
  name: Bool
  nameWithType: Bool
  fullName: CRMScript.Global.Bool
