### YamlMime:ManagedReference
items:
- uid: CRMScript.Native.User
  commentId: T:CRMScript.Native.User
  id: User
  so.intellisense: Void.User
  langs:
  - crmscript
  children:
  - CRMScript.Native.User.getValue
  - CRMScript.Native.User.hasTicketAccess
  - CRMScript.Native.User.isAdministrator
  - CRMScript.Native.User.isLoggedIn
  - CRMScript.Native.User.load
  - CRMScript.Native.User.loadFromAgentAndKey
  - CRMScript.Native.User.save
  - CRMScript.Native.User.setValue
  - CRMScript.Native.User.toParser
  - CRMScript.Native.User.#ctor
  name: User
  nameWithType: User
  fullName: CRMScript.Native.User
  type: Class
  summary: "\nClass for representing a user.\n"
  example: 
  - "\n<pre><code>User u;\n\nu.load(2); // Loads user with id = 2\nprint(u.getValue(&quot;username&quot;));\nu.setValue(&quot;email&quot;, &quot;bob@example.com&quot;);\nu.setValue(&quot;language&quot;, &quot;en&quot;); // &quot;no&quot; or &quot;en&quot;\nu.setValue(&quot;status&quot;, &quot;1&quot;); // 1 is Active, 2 is Not Present, 3 is deleted\nprint(u.isLoggedIn(2).toString()); // 2 = web pages, 1 = soap interface</code></pre>\n"
- uid: CRMScript.Native.User.getValue
  commentId: M:CRMScript.Native.User.getValue
  id: 'getValue'
  so.intellisense: User.getValue
  langs:
  - crmscript
  name: 'getValue'
  nameWithType: User.getValue
  fullName: CRMScript.Native.User.getValue
  type: Method
  summary: "\nGets the value of a given column.\n"
  remarks: 
  syntax: 
    content: String getValue(String colName)
    parameters:
    - id: colName
      type: CRMScript.Global.String
      description: 
    return:
      type: CRMScript.Global.String
  example: 
- uid: CRMScript.Native.User.hasTicketAccess
  commentId: M:CRMScript.Native.User.hasTicketAccess
  id: 'hasTicketAccess'
  so.intellisense: User.hasTicketAccess
  langs:
  - crmscript
  name: 'hasTicketAccess'
  nameWithType: User.hasTicketAccess
  fullName: CRMScript.Native.User.hasTicketAccess
  type: Method
  summary: "\nReturns true if the user have at least the given access to the given ticket id. accessLevel is 0 for listing tickets, 1 for reading tickets and 2 for editing tickets.\n"
  remarks: 
  syntax: 
    content: hasTicketAccess(Integer ticketId, Integer accessLevel)
    parameters:
    - id: ticketId
      type: CRMScript.Global.Integer
      description: 
    - id: accessLevel
      type: CRMScript.Global.Integer
      description: 
  example: 
- uid: CRMScript.Native.User.isAdministrator
  commentId: M:CRMScript.Native.User.isAdministrator
  id: 'isAdministrator'
  so.intellisense: User.isAdministrator
  langs:
  - crmscript
  name: 'isAdministrator'
  nameWithType: User.isAdministrator
  fullName: CRMScript.Native.User.isAdministrator
  type: Method
  summary: "\nReturns true if the user is an administrator, false if not.\n"
  remarks: 
  syntax: 
    content: isAdministrator()
    parameters:
  example: 
- uid: CRMScript.Native.User.isLoggedIn
  commentId: M:CRMScript.Native.User.isLoggedIn
  id: 'isLoggedIn'
  so.intellisense: User.isLoggedIn
  langs:
  - crmscript
  name: 'isLoggedIn'
  nameWithType: User.isLoggedIn
  fullName: CRMScript.Native.User.isLoggedIn
  type: Method
  summary: "\nCheck if a user is logged in or not.\n"
  remarks: 
  syntax: 
    content: isLoggedIn(Integer origin)
    parameters:
    - id: origin
      type: CRMScript.Global.Integer
      description: 
  example: 
- uid: CRMScript.Native.User.load
  commentId: M:CRMScript.Native.User.load
  id: 'load'
  so.intellisense: User.load
  langs:
  - crmscript
  name: 'load'
  nameWithType: User.load
  fullName: CRMScript.Native.User.load
  type: Method
  summary: "\nLoads a user from the database<p></p>\n<ul><li><strong>Integer,:</strong>the user id</li><li><strong>Returns:</strong>Bool, true if the user is loaded successfully</li></ul>\n"
  remarks: 
  syntax: 
    content: load(Integer p_id)
    parameters:
    - id: p_id
      type: CRMScript.Global.Integer
      description: 
  example: 
- uid: CRMScript.Native.User.loadFromAgentAndKey
  commentId: M:CRMScript.Native.User.loadFromAgentAndKey
  id: 'loadFromAgentAndKey'
  so.intellisense: User.loadFromAgentAndKey
  langs:
  - crmscript
  name: 'loadFromAgentAndKey'
  nameWithType: User.loadFromAgentAndKey
  fullName: CRMScript.Native.User.loadFromAgentAndKey
  type: Method
  summary: "\nLoads a user from an Agent with userId and the Agent's key.<p></p>\n<strong>Returns:</strong>Bool of load result, True if loaded successfully\n"
  remarks: 
  syntax: 
    content: loadFromAgentAndKey(Integer id, String Key)
    parameters:
    - id: id
      type: CRMScript.Global.Integer
      description: 
    - id: Key
      type: CRMScript.Global.String
      description: 
  example: 
- uid: CRMScript.Native.User.save
  commentId: M:CRMScript.Native.User.save
  id: 'save'
  so.intellisense: User.save
  langs:
  - crmscript
  name: 'save'
  nameWithType: User.save
  fullName: CRMScript.Native.User.save
  type: Method
  summary: "\nSaves a user object to the database, returns the id of the user as an Integer.<p></p>\n<ul><li><strong>Returns:</strong>Integer, user id</li></ul>\n"
  remarks: 
  syntax: 
    content: save()
    parameters:
  example: 
- uid: CRMScript.Native.User.setValue
  commentId: M:CRMScript.Native.User.setValue
  id: 'setValue'
  so.intellisense: User.setValue
  langs:
  - crmscript
  name: 'setValue'
  nameWithType: User.setValue
  fullName: CRMScript.Native.User.setValue
  type: Method
  summary: "\nSets a value in a given column.\n"
  remarks: 
  syntax: 
    content: Void setValue(String column, String value)
    parameters:
    - id: column
      type: CRMScript.Global.String
      description: 
    - id: value
      type: CRMScript.Global.String
      description: 
    - id: columns
      type: CRMScript.Global.String
      description: String with column name
    return:
      type: CRMScript.Global.Void
  example: 
- uid: CRMScript.Native.User.toParser
  commentId: M:CRMScript.Native.User.toParser
  id: 'toParser'
  so.intellisense: User.toParser
  langs:
  - crmscript
  name: 'toParser'
  nameWithType: User.toParser
  fullName: CRMScript.Native.User.toParser
  type: Method
  summary: "\nLoads a user and returns it to a given Parser.\n"
  remarks: 
  syntax: 
    content: toParser(Parser parser)
    parameters:
    - id: parser
      type: CRMScript.Native.Parser
      description: 
    - id: Parser
      type: 
      description: 
  example: 
- uid: CRMScript.Native.User.#ctor
  commentId: M:CRMScript.Native.User.#ctor
  id: '#ctor'
  so.intellisense: Void.User
  langs:
  - crmscript
  name: '#ctor'
  nameWithType: User.#ctor
  fullName: CRMScript.Native.User.#ctor
  type: Constructor
  summary: "\nClass for representing a user.\n"
  remarks: 
  syntax: 
    content: User
  example: 
  - "\n<pre><code>User u;\n\nu.load(2); // Loads user with id = 2\nprint(u.getValue(&quot;username&quot;));\nu.setValue(&quot;email&quot;, &quot;bob@example.com&quot;);\nu.setValue(&quot;language&quot;, &quot;en&quot;); // &quot;no&quot; or &quot;en&quot;\nu.setValue(&quot;status&quot;, &quot;1&quot;); // 1 is Active, 2 is Not Present, 3 is deleted\nprint(u.isLoggedIn(2).toString()); // 2 = web pages, 1 = soap interface</code></pre>\n"
references:
- uid: CRMScript.Native.User
  commentId: T:CRMScript.Native.User
  isExternal: true
  name: User
  nameWithType: User
  fullName: CRMScript.Native.User
- uid: CRMScript.Global.String
  commentId: T:CRMScript.Global.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: CRMScript.Global.String
- uid: CRMScript.Global.Integer
  commentId: T:CRMScript.Global.Integer
  isExternal: true
  name: Integer
  nameWithType: Integer
  fullName: CRMScript.Global.Integer
- uid: CRMScript.Global.Void
  commentId: T:CRMScript.Global.Void
  isExternal: true
  name: Void
  nameWithType: Void
  fullName: CRMScript.Global.Void
- uid: CRMScript.Native.Parser
  commentId: T:CRMScript.Native.Parser
  isExternal: true
  name: Parser
  nameWithType: Parser
  fullName: CRMScript.Native.Parser